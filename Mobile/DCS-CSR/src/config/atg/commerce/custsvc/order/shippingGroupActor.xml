<?xml version="1.0" encoding="UTF-8"?>

<actor-template>

  <actor-chain id="applyShippingGroups">
    <form id="shippingGroupFormHandler" name="/atg/commerce/custsvc/order/ShippingGroupFormHandler" handle="applyShippingGroups">
      <input name="toShippingGroupName" value="${param.toShippingGroupName}" />
      <input name="toLocationId" value="${param.toLocationId}" />
      <input name="shippingMethod" value="${param.shippingMethod}" />
      <input name="commerceItemIds" value="${param.commerceItemIds}">
        <tag-converter class-name="atg.droplet.ArrayTagConverter"/>
      </input>
      <input name="applyShippingGroupsErrorURL" value="/model/atg/commerce/custsvc/order/ShippingGroupActor/applyShippingGroups-error" />
      <input name="applyShippingGroupsSuccessURL" value="/model/atg/commerce/custsvc/order/ShippingGroupActor/applyShippingGroups-success" />
    </form>
  </actor-chain>
  <actor-chain id="applyShippingGroups-error" transaction="TX_SUPPORTS">
    <actor id="error" name="/atg/commerce/custsvc/order/ShippingGroupActor" chain-id="error" return-model-var="model">
      <output id="model" add-map-children="true" value="${model}"/>
    </actor>
  </actor-chain>
  <actor-chain id="applyShippingGroups-success" transaction="TX_SUPPORTS">
    <actor id="cart" name="/atg/commerce/custsvc/order/ShoppingCartActor" chain-id="detailed" return-model-var="model">
      <output id="cart" add-map-children="true" value="${model}"/>
    </actor>
    <!-- output the display names of the commerce items that weren't moved due to insufficient stock levels -->
    <droplet id="forEach" name="/atg/dynamo/droplet/ForEach" var="forEach">
      <input name="array" value="${nucleus['/atg/commerce/custsvc/order/ShippingGroupFormHandler'].outOfStockItems}" />
      <oparam name="output">
        <output id="outOfStockItems" name="outOfStockItems[${forEach.index}]" 
                value="${forEach.element.auxiliaryData.catalogRef.displayName}" />
      </oparam>
    </droplet>
  </actor-chain>

  <actor-chain id="applyShippingMethods-success">
    <actor id="cart" name="/atg/commerce/custsvc/order/ShoppingCartActor" chain-id="detailed" return-model-var="model">
      <output id="cart" add-map-children="true" value="${model}"/>
    </actor>
  </actor-chain>
  
  <!-- initialize the shipping group map container, and output the addresses from hardgoodShippingGroups -->
  <actor-chain id="getShippingAddresses" transaction="TX_SUPPORTS">
    <droplet id="shippingGroupDroplet" name="/atg/commerce/custsvc/order/ShippingGroupDroplet"
      var="shippingGroupDropletParamStack">
      <input name="shippingGroupTypes"
        value="${nucleus['/atg/commerce/custsvc/util/CSRConfigurator'].shippingGroupTypesToBeInitialized}" />
      <input name="clearShippingInfos" value="true" />
      <input name="initShippingGroups" value="true" />
      <input name="initShippingInfos" value="true" />
      <input name="initBasedOnOrder" value="true" />
    </droplet>

    <droplet id="applicableShippingGroups" name="/atg/commerce/custsvc/order/ApplicableShippingGroups"
      var="applicableShippingGroupsParamStack">
      <input name="order" value="${nucleus['/atg/commerce/custsvc/order/ShoppingCart'].current}" />
      <oparam name="output">
        <droplet id="forEach" name="/atg/dynamo/droplet/ForEach" var="forEachSG">
          <input name="array" value="${applicableShippingGroupsParamStack.shippingGroups}" />
          <oparam name="output">
            <droplet id="compare" name="/atg/dynamo/droplet/Compare">
              <input name="obj1" value="${forEachSG.element.shippingGroupClassType}" />
              <input name="obj2" value="hardgoodShippingGroup" />
              <oparam name="equal">
                <output id="address" name="addresses.${forEachSG.key}"
                    value="${forEachSG.element.shippingAddress}" />
                <output id="address" name="addresses.${forEachSG.key}.addressId"
                    value="${forEachSG.element.id}" />
              </oparam>
            </droplet>
          </oparam>
        </droplet>
      </oparam>
    </droplet>
  </actor-chain>
 
  <!-- move all items into a new hardgood shipping group -->
  <actor-chain id="resetShippingGroups">
	<droplet id="shippingGroupDroplet" name="/atg/commerce/custsvc/order/ShippingGroupDroplet"
      var="shippingGroupDropletParamStack">
      <input name="shippingGroupTypes"
        value="${nucleus['/atg/commerce/custsvc/util/CSRConfigurator'].shippingGroupTypesToBeInitialized}" />
      <input name="clearShippingInfos" value="true" />
      <input name="initShippingGroups" value="true" />
      <input name="initShippingInfos" value="true" />
      <input name="initBasedOnOrder" value="true" />
    </droplet>
      
    <form id="shippingGroupFormHandler" name="/atg/commerce/custsvc/order/ShippingGroupFormHandler" handle="resetShippingGroups">
      <input name="resetShippingGroupsErrorURL" value="/model/atg/commerce/custsvc/order/ShippingGroupActor/resetShippingGroups-error" />
      <input name="resetStoreShippingGroupsSuccessURL" value="/model/atg/commerce/custsvc/order/ShippingGroupActor/resetShippingGroups-success" />
    </form>  
  </actor-chain>

  <actor-chain id="resetShippingGroups-error" transaction="TX_SUPPORTS">
    <actor id="error" name="/atg/commerce/custsvc/order/ShippingGroupActor" chain-id="error" return-model-var="model">
      <output id="model" add-map-children="true" value="${model}"/>
    </actor>
  </actor-chain>

  <actor-chain id="resetShippingGroups-success" transaction="TX_SUPPORTS">
	<actor id="shoppingCart" name="/atg/commerce/custsvc/order/ShoppingCartActor" chain-id="detailed" return-model-var="model">
      <output id="shoppingCart" name="order" value="${model.order}"/>
    </actor>
  </actor-chain>

</actor-template>
<!-- @version $Id: //hosting-blueprint/B2CBlueprint/version/10.2.1/EStore/config/atg/commerce/order/purchase/shippingGroupActor.xml#4 
  $$Change: 851342 $ -->
